geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = X_grid, y = pred, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}
gam_model <- gam(Y ~ s(X, k = 4, bs = "cr", m = 0), data = df)
X_grid <- seq(min(df$X), max(df$X), length.out = 100)
pred <- predict(gam_model, newdata = data.frame(X = X_grid))
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = X_grid, y = pred, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}
fit <- smooth.spline(df$Y ~ df$X, df = 2, spar = 3)
pred <- predict(fit)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = pred$x, y = pred$y, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}=
fit <- smooth.spline(df$Y ~ df$X, df = 2, spar = 2)
pred <- predict(fit)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = pred$x, y = pred$y, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}
fit <- smooth.spline(df$Y ~ df$X, df = 2, spar = 1)
pred <- predict(fit)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = pred$x, y = pred$y, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}
fit <- smooth.spline(df$Y ~ df$X, df = 2, spar = 0)
pred <- predict(fit)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = pred$x, y = pred$y, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}
fit <- ss(df$Y ~ df$X, df = 2, m = 0)
library(npreg)
install.packages("npreg")
library(npreg)
#| vscode: {languageId: r}
fit <- smooth.spline(df$Y ~ df$X, df = 2, spar = 1)
pred <- predict(fit)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = pred$x, y = pred$y, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}
fit <- ss(df$Y ~ df$X, df = 2, m = 0)
#| vscode: {languageId: r}
fit <- ss(df$Y, df$X, df = 2, m = 0)
#| vscode: {languageId: r}
fit <- ss(df$Y, df$X, df = 2, m = 1)
pred <- predict(fit)
#| vscode: {languageId: r}
fit <- ss(df$Y, df$X, df = 2, m = 1)
pred <- predict(fit)
#| vscode: {languageId: r}
fit <- ss(df$Y, df$X, df = 2, m = 1)
#pred <- predict(fit)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = x, y =fit, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}
fit <- ss(df$Y, df$X, df = 2, m = 1)
#pred <- predict(fit)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = X, y =fit, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}
fit <- ss(df$Y ~ df$X, df = 2, spar = 0)
#| vscode: {languageId: r}
fit <- smooth.spline(df$Y ~ df$X, df = 2, spar = 0)
pred <- predict(fit)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = pred$x, y = pred$y, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}
fit <- smooth.spline(df$Y ~ df$X, df = 2, spar = 1)
pred <- predict(fit)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = pred$x, y = pred$y, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}
fit <- gam(Y ~ s(X, bs = "cr", df = 2, m = 1), data = df)
?s
#| vscode: {languageId: r}
fit <- gam.s(Y ~ s(X, bs = "cr", df = 2, m = 1), data = df)
#| vscode: {languageId: r}
fit <- gam.s(Y ~ s(X, bs = "cr", df = 2, m = 1))
#| vscode: {languageId: r}
fit <- gam(Y ~ s(X, df = 2, m = 1), data = df)
#| vscode: {languageId: r}
fit <- gam(Y ~ s(X), data = df)
pred <- predict(fit)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = pred$x, y = pred$y, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}
fit <- gam(Y ~ s(X), data = df)
Y_hat <- predict(fit)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = X, y = pred, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}
fit <- gam(Y ~ s(X, df = 2), data = df)
#| vscode: {languageId: r}
fit <- gam(Y ~ s(X,2), data = df)
#| vscode: {languageId: r}
fit <- gam.s(X, Y, s(X, df = 2), data = df)
#| vscode: {languageId: r}
fit <- gam.s(X, Y, s(X, df = 2))
#| vscode: {languageId: r}
fit <- smooth.spline(df$Y ~ df$X, df = 2)
pred <- predict(fit)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = pred$x, y = pred$y, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}
fit <- smooth.spline(df$Y ~ df$X, df = 2)
pred <- predict(fit)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = pred$x, y = pred$y, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}
# n = 100
fit <- smooth.spline(df$Y ~ df$X, df = 100)
pred <- predict(fit)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = pred$x, y = pred$y, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}
fit <- smooth.spline(df$X, df$Y, lambda = Inf, m = 2, all.knots = TRUE)
#| vscode: {languageId: r}
fit <- lm(Y~X, data = df)
pred <- predict(fit)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = pred$x, y = pred$y, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}
fit <- lm(Y~X, data = df)
pred <- predict(fit)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = X, y = pred, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}
fit <- smooth.spline(df$Y ~ df$X, df = 2)
pred <- predict(fit)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = pred$x, y = pred$y, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}=
dy2dx2 <- diff(diff(y, 1), 1) / (x[3] - x[1])^2
#| vscode: {languageId: r}=
dy2dx2 <- diff(diff(Y, 1), 1) / (X[3] - X[1])^2
fit <- smooth.spline(X, Y, w = 1 / (dy2dx2 + 1e-6)^2, all.knots = TRUE)
#| vscode: {languageId: r}=
dy2dx2 <- diff(diff(Y) / diff(X)) / diff(X)[-1]
fit <- smooth.spline(X, Y, w = 1 / (dy2dx2 + 1e-6)^2, all.knots = TRUE)
#| vscode: {languageId: r}
dy2dx2 <- diff(diff(Y) / diff(X)) / diff(X)[-1]
fit <- smooth.spline(X, Y, w = 1 / (dy2dx2 + 1e-6)^2, all.knots = TRUE)
#| vscode: {languageId: r}
dy2dx2 <- diff(diff(Y) / diff(X)) / diff(X)[-1]
fit <- smooth.spline(X, Y, w = 1 / (dy2dx2 + 1e-6)^2, all.knots = TRUE)
#| vscode: {languageId: r}
dy2dx2 <- c(NA, diff(diff(Y) / diff(X)) / diff(X)[-1], NA)
fit <- smooth.spline(X, Y, w = 1 / (dy2dx2 + 1e-6)^2, all.knots = TRUE)
#| vscode: {languageId: r}
dy2dx2 <- diff(diff(Y) / diff(X)) / diff(X)[-1]
fit <- smooth.spline(X[-1], Y[-1], w = 1 / (dy2dx2 + 1e-6)^2, all.knots = TRUE)
#| vscode: {languageId: r}
dy2dx2 <- diff(diff(Y) / diff(X)) / diff(X)[-1]
fit <- smooth.spline(X[c(-1, -100)], Y[c(-1, -100)], w = 1 / (dy2dx2 + 1e-6)^2, all.knots = TRUE)
pred <- predict(fit, X)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = pred$x, y = pred$y, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}
dy2dx2 <- diff(diff(Y) / diff(X)) / diff(X)[-1]
fit <- smooth.spline(X[c(-1, -100)],
Y[c(-1, -100)],
w = 1 / (dy2dx2 + 1e-6)^2,
df = 2)
pred <- predict(fit, X)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = pred$x, y = pred$y, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}
dydx <- diff(Y) / diff(X)
fit <- smooth.spline(X[c(-1, -100)],
Y[c(-1, -100)],
w = 1 / (dydx + 1e-6)^2,
df = 2)
#| vscode: {languageId: r}
dydx <- diff(Y) / diff(X)
fit <- smooth.spline(X[c(-1)],
Y[c(-1)],
w = 1 / (dydx + 1e-6)^2,
df = 2)
pred <- predict(fit, X)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = pred$x, y = pred$y, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}
fit <- smooth.spline(df$Y ~ df$X)
pred <- predict(fit)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = pred$x, y = pred$y, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}
dx <- diff(X)
dy <- diff(Y)
dydx <- dy / dx
d2ydx2 <- diff(dydx) / dx[-1]
d3ydx3 <- c(NA, diff(d2ydx2) / dx[-c(1, length(dx))], NA)
fit <- smooth.spline(X[c(-1, -100)],
Y[c(-1, -100)],
w = 1 / (dy3dx3 + 1e-6)^2,
df = 2)
#| vscode: {languageId: r}
dx <- diff(X)
dy <- diff(Y)
dydx <- dy / dx
d2ydx2 <- diff(dydx) / dx[-1]
d3ydx3 <- c(NA, diff(d2ydx2) / dx[-c(1, length(dx))], NA)
fit <- smooth.spline(X[c(-1, -100)],
Y[c(-1, -100)],
w = 1 / (d3ydx3 + 1e-6)^2,
df = 2)
#| vscode: {languageId: r}
dx <- diff(X)
dy <- diff(Y)
dydx <- dy / dx
d2ydx2 <- diff(dydx) / dx[-1]
d3ydx3 <- diff(d2ydx2) / dx[-c(1, length(dx))]
fit <- smooth.spline(X[c(-1, -100)],
Y[c(-1, -100)],
w = 1 / (d3ydx3 + 1e-6)^2,
df = 2)
#| vscode: {languageId: r}
dx <- diff(X)
dy <- diff(Y)
dydx <- dy / dx
d2ydx2 <- diff(dydx) / dx[-1]
d3ydx3 <- diff(d2ydx2) / dx[-c(1, length(dx))]
fit <- smooth.spline(X[c(-1, -2, -100)],
Y[c(-1, -2, -100)],
w = 1 / (d3ydx3 + 1e-6)^2,
df = 2)
pred <- predict(fit, X)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = pred$x, y = pred$y, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
#| vscode: {languageId: r}
fit <- smooth.spline(df$Y ~ df$X)
pred <- predict(fit)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = pred$x, y = pred$y, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
fit$lambda
#| vscode: {languageId: r}
fit <- smooth.spline(df$Y ~ df$X)
pred <- predict(fit)
ggplot(df, aes(x = X, y = Y)) +
geom_point(alpha = 0.5) +
stat_function(fun = generating_fn, aes(col = "Generating Function")) +
geom_line(aes(x = pred$x, y = pred$y, col = "Curve"), linetype = "dashed") +
scale_color_manual(values = c("firebrick", "deepskyblue3")) +
theme(legend.position = "right", legend.title = element_blank())
print(fit$lambda)
#| vscode: {languageId: r}
# INSERT CODE HERE
m2 <- gam(sales ~ s(TV, df = 2) +
s(radio, df = 2) +
s(newspaper, df = 2),
data = train_data)
#| vscode: {languageId: r}
# INSERT CODE HERE
m2 <- gam(sales ~ s(TV, df = 2) +
s(radio, df = 2) +
s(newspaper, df = 2),
data = train_data)
#| vscode: {languageId: r}
# GET DATA
set.seed(441)
ads <- read_csv('https://www.statlearning.com/s/Advertising.csv')
ads <- ads[, -1] # remove the X variable (index)
train <- sample(200, 140)
train_data <- ads[train, ]
test_data <- ads[-train, ]
#| vscode: {languageId: r}
# INSERT CODE HERE
m2 <- gam(sales ~ s(TV, df = 2) +
s(radio, df = 2) +
s(newspaper, df = 2),
data = train_data)
m3 <- gam(sales ~ s(TV, df = 3) +
s(radio, df = 3) +
s(newspaper, df = 3),
data = train_data)
library(tidyverse)
library(ggplot2)
games <- read_csv('data/games.csv')
setwd("/Users/tsigall/Repositories/dsan6600")
library(tidyverse)
library(ggplot2)
setwd("/Users/tsigall/Repositories/dsan6600")
games <- read_csv('data/games.csv')
library(tidyverse)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/tsigall/Repositories/dsan6600")
library(tidyverse)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/Users/tsigall/Repositories/dsan6600")
games <- read_csv('data/games.csv')
players <- read_csv('data/players.csv')
plays <- read_csv('data/plays.csv')
tackles <- read_csv('data/tackles.csv')
head(games)
head(players)
head(plays)
head(tackles)
tackles <- left_join(tackles, games, by = 'gameId')
head(tackles)
tackles_weekly <- tackles %>%
group_by(gameId) %>%
summarize(tackles = sum(tackle),
forcedFumble = sum(forcedFumble),
week = mean(week)) %>%
ungroup() %>%
group_by(week) %>%
summarize(tackles = mean(tackles),
forcedFumble = mean(forcedFumble))
ggplot(aes(x = week, y = tackles), data = tackles_weekly) +
geom_line()
ggplot(aes(x = week, y = forcedFumble), data = tackles_weekly) +
geom_line()
left_join(tackles, games, by = 'gameId')
left_join(tackles, players, by = 'nflId')
left_join(tackles, players, by = 'nflId') %>%
select(displayName)
left_join(tackles, players, by = 'nflId') %>%
select(displayName) %>%
group_by(displayName) %>%
summarize(total = n())
left_join(tackles, players, by = 'nflId') %>%
select(displayName) %>%
group_by(displayName) %>%
summarize(total = n()) %>%
arrange(desc(total))
left_join(tackles, players, by = 'nflId') %>%
select(displayName, week) %>%
group_by(displayName) %>%
summarize(total = n()) %>%
arrange(desc(total))
left_join(tackles, players, by = 'nflId') %>%
select(displayName, week) %>%
group_by(displayName, week) %>%
summarize(total = n()) %>%
arrange(desc(total))
left_join(tackles, players, by = 'nflId') %>%
group_by(displayName) %>%
summarize(total = n()) %>%
arrange(desc(total))
ggplot(aes(y = total), data = leaders) +
geom_bar()
leaders <- left_join(tackles, players, by = 'nflId') %>%
group_by(displayName) %>%
summarize(total = n()) %>%
arrange(desc(total))
ggplot(aes(y = total), data = leaders) +
geom_bar()
ggplot(aes(x = total), data = leaders) +
geom_bar()
ggplot(aes(x = total), data = leaders) +
geom_bar(stat = "identity")
ggplot(aes(x = total), data = leaders) +
geom_bar()
leaders <- left_join(tackles, players, by = 'nflId') %>%
group_by(displayName) %>%
summarize(total = n()) %>%
arrange(desc(total)) %>%
filter(total > 50)
ggplot(aes(x = total), data = leaders) +
geom_bar()
ggplot(aes(x = displayName, y = total), data = leaders) +
geom_bar(stat = "identity")
leaders <- left_join(tackles, players, by = 'nflId') %>%
group_by(displayName) %>%
summarize(total = n()) %>%
filter(total > 80)
ggplot(aes(x = displayName, y = total), data = leaders) +
geom_bar(stat = "identity")
leaders <- left_join(tackles, players, by = 'nflId') %>%
group_by(displayName) %>%
summarize(total = n()) %>%
filter(total > 80) %>%
arrange(desc(total))
ggplot(aes(x = reorder(displayName, total), y = total), data = leaders) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_cartesian(ylim = c(50, max(leaders$total))) +
xlab("Player Name") +
ylab("Total Tackles") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(aes(x = reorder(displayName, total), y = total), data = leaders) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_cartesian(ylim = c(75, max(leaders$total))) +
xlab("Player Name") +
ylab("Total Tackles") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
leaders <- left_join(tackles, players, by = 'nflId') %>%
group_by(displayName) %>%
summarize(total = n()) %>%
filter(total > 80) %>%
arrange(asc(total))
leaders <- left_join(tackles, players, by = 'nflId') %>%
group_by(displayName) %>%
summarize(total = n()) %>%
filter(total > 80) %>%
arrange((total))
ggplot(aes(x = reorder(displayName, total), y = total), data = leaders) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_cartesian(ylim = c(75, max(leaders$total))) +
xlab("Player Name") +
ylab("Total Tackles") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
leaders <- left_join(tackles, players, by = 'nflId') %>%
group_by(displayName) %>%
summarize(total = n()) %>%
filter(total > 80) %>%
arrange(desc(total))
ggplot(aes(x = reorder(displayName, total), y = total), data = leaders) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_cartesian(ylim = c(75, max(leaders$total))) +
xlab("Player Name") +
ylab("Total Tackles") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
